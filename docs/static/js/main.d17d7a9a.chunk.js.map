{"version":3,"sources":["containers/Game/models.js","containers/Game/actions.js","utils/functions.js","containers/Game/reducer.js","store/reducer.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["LEVEL","easy","name","rows","cols","mines","meduim","hard","Cell","Record","x","y","hasMine","isOpened","isFlaged","value","neghbours","List","Game","board","level","flaggedCells","openedCells","state","openCell","cell","dispatch","getState","game","get","setupMinesAction","cellOpen","type","payload","alert","forEach","neighbourPos","neighbour","getIn","fillArray","Array","fill","map","elm","setupMines","firstOpenedCell","minedBoard","withMutations","grid","i","Math","floor","random","setIn","setupNeighbours","row","col","j","neighbours","getNeighbor","filter","length","neighboursPos","fromJS","initialState","filledArray","generateBoardData","combineReducers","action","update","set","middlewares","thunk","composeEnhancers","composeWithDevTools","trace","store","createStore","reducer","applyMiddleware","connect","className","size","key","onClick","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d17d7a9a.chunk.js","sourcesContent":["import {List, Record} from 'immutable'\n\nconst LEVEL = {\n    easy: {name: 'easy', rows: 10, cols: 10, mines: 10},\n    meduim: {name: 'medium', rows: 20, cols: 20, mines: 20},\n    hard: {name: 'hard', rows: 30, cols: 30, mines: 30},\n};\n\nconst GAME_STATE = {\n    init: {name: 'init'},\n    inprogress: {name: 'init'},\n    win: {name: 'win'},\n    lost: {name: 'lost'},\n}\n\nconst Cell = Record({\n    x: -1,\n    y: -1,\n    hasMine: false,\n    isOpened: false,\n    isFlaged: false,\n    value: 0,\n    neghbours: List(),\n});\n\nconst Game = Record({\n    board: List(),\n    level: LEVEL.easy,\n    flaggedCells: 0,\n    openedCells: 0,\n    state: GAME_STATE.init,\n});\n\n\nexport {\n    LEVEL,\n    Cell,\n    GAME_STATE,\n    Game,\n}","export const GAME_INIT = 'GAME_INIT';\n\nexport const gameInit = () => ({\n    type: GAME_INIT,\n    payload: {}\n});\n\n\nexport const CELL_OPEN = 'CELL_OPEN';\nexport const cellOpen = (cell) => {\n    return (dispatch, getState) => {\n\n        const {game} = getState();\n\n        dispatch({\n            type: CELL_OPEN,\n            payload: cell,\n        });\n\n        if(cell.get('hasMine')){\n            alert('looooose');\n            return;\n        }else if(cell.get('value') === 0 && !cell.get('isOpened')){\n\n            const neighbours = cell.get('neghbours');\n            //console.log(neighbours)\n            neighbours.forEach(neighbourPos => {\n                const neighbour = game.getIn(['board', ...neighbourPos]);\n                if(!neighbour.get('hasMine')){\n                    //console.log(neighbour);\n                    dispatch(cellOpen(neighbour));\n                }\n            });\n            //console.log(neighbours);\n        }\n    }\n}\n\n\nexport const openCell = (cell) => {\n\n    return (dispatch, getState) => {\n\n        const {game} = getState();\n        \n        if(game.get('openedCells') === 0) {\n            dispatch(setupMinesAction(cell));\n        }\n\n        dispatch(cellOpen(cell));\n        //dispatch(increaseOpenedCells()); // no more needed\n    }\n}\n\n\nexport const SETUP_MINES = 'SETUP_MINES';\nexport const setupMinesAction = (cell) => {\n    return {\n        type: SETUP_MINES,\n        payload: cell\n    }\n}\n\nexport const INCREASE_OPENED_CELLS = 'INCREASE_OPENED_CELLS';\nexport const increaseOpenedCells = () => ({\n    type: INCREASE_OPENED_CELLS,\n    payload: null\n})\n","import {fromJS, List} from 'immutable'\nimport {Cell, LEVEL} from '../containers/Game/models'\n\n\nexport const fillArray = (rows, cols, value = null) => {\n    return new Array(rows).fill(value, 0, rows).map(elm => new Array(cols).fill(value, 0, cols))\n}\n\nexport const generateBoardData = (level = LEVEL.easy) => {\n    const filledArray = fillArray(level.rows, level.cols, null);\n    \n    filledArray.forEach((row, x) => {\n        row.forEach((col, y) => {\n            filledArray[x][y] = Cell({x,y});\n        });\n    });\n\n    return fromJS(filledArray);\n}\n\nexport const setupMines = (board, level, firstOpenedCell) => {\n    const {rows, cols, mines} = level;\n    const minedBoard = board.withMutations(grid => {\n        let i = 0;\n        //console.log(firstOpenedCell);\n        while(i < mines){\n            let x = Math.floor(Math.random() * rows);\n            let y = Math.floor(Math.random() * cols);\n            //console.log({x,y});\n            if(\n                firstOpenedCell.get('x') !== x && \n                firstOpenedCell.get('y') !== y &&\n                grid.getIn([x,y, 'hasMine']) === false){\n\n                    grid.setIn([x, y,'hasMine'], true);\n                    i++;    \n            }\n            \n        }\n    });\n\n    const fullBoard = setupNeighbours(minedBoard);\n    return fullBoard;\n}\n\nexport const setupNeighbours = (board) => {\n    return board.withMutations(grid => {\n        grid.forEach((row, i) => {\n            row.forEach((col, j) => {\n                \n                const neighbours = [\n                    getNeighbor(grid, i, j-1),\n                    getNeighbor(grid, i-1, j-1),\n                    getNeighbor(grid, i-1, j),\n                    getNeighbor(grid, i-1, j+1),\n                    getNeighbor(grid, i, j+1),\n                    getNeighbor(grid, i+1, j+1),\n                    getNeighbor(grid, i+1, j),\n                    getNeighbor(grid, i+1, j-1),\n                ].filter(neighbour => neighbour && neighbour != null);\n                //console.log({i,j}, neighbours)\n                const value = neighbours.filter(neighbour => neighbour && neighbour.get('hasMine')).length;\n                \n                grid.setIn([i,j, 'value'], value);\n\n                const neighboursPos = neighbours.map(neighbour => [neighbour.get('x'), neighbour.get('y')]);\n                grid.setIn([i,j, 'neghbours'], fromJS(neighboursPos));\n            });\n        })\n    });\n}\n\nconst getNeighbor = (grid, i, j) => {\n\n    if(i<0 || j<0) return null;\n    \n    const row = grid.get(i);\n\n    if(!row) return null;\n\n    const cell = row.get(j);\n\n    if(!cell) return null;\n\n    return cell;\n}\n\n","import { Game } from './models'\nimport {GAME_INIT, CELL_OPEN, SETUP_MINES, INCREASE_OPENED_CELLS} from './actions'\nimport {generateBoardData, setupMines} from '../../utils/functions'\n\n\nconst initialState = Game({board: generateBoardData()});\n\nexport default (state = initialState, action) => {\n    \n    switch(action.type){\n        case SETUP_MINES: return state\n            .update('board', board => \n                setupMines(board, state.get('level'), action.payload)\n            );\n        case CELL_OPEN: return state\n            .setIn(['board', action.payload.x, action.payload.y, 'isOpened'], true)\n            .update('openedCells', openedCells => ++openedCells);\n        case INCREASE_OPENED_CELLS: return state.set('openedCells', state.get('openedCells') + 1);\n        case GAME_INIT: return initialState;\n        default: return state;\n    }\n}","import { combineReducers } from 'redux'\nimport gameReducer from '../containers/Game/reducer'\n\nexport default combineReducers({\n    game: gameReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducer'\n\nconst middlewares = [thunk];\nconst composeEnhancers = composeWithDevTools({\n    trace: true,\n});\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middlewares)));\n\nexport default store;\n","import React from 'react'\nimport {connect} from 'react-redux'\n\nimport {openCell} from './containers/Game/actions'\n// let board = new Array(10);\n// board = board.fill(new Array(10), 0, 9).map(row => row.fill(0, 0, 9));\n\n\n\nfunction App({game, openCell}) {\n  const {board} = game;\n\n  return (\n      <div className=\"App\">\n      <header>\n          <h1>Mine Sweeper </h1>\n      </header>\n      <main>\n        <div className='board'>\n          {\n            board.size > 0 && board.map((row, key) => <div key={key} className='row'> \n              {\n                row.map((cell, key) => <div \n                  key={key} \n                  className={`cell ${cell.get('isOpened') ? 'cell-opened' : ''}`} \n                  onClick={() => openCell(cell)}\n                  style={cell.get('hasMine') && cell.get('isOpened') ? {backgroundColor: 'red'} : {}}\n                > \n                    {cell.get('hasMine') ? '' : cell.get('isOpened') && cell.get('value') > 0 ? cell.get('value') : ''}\n                </div>)\n              }\n              </div>\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nconst mapPropsToState = ({game}) => {\n  return {\n    game\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    openCell: (cell) => dispatch(openCell(cell)),\n  }\n}\n\nexport default connect(mapPropsToState, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\n\nimport store from './store'\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}